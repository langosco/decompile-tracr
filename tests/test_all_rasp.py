# %%

# Assume that script/generate_data.py and script/dedupe.py has already been run
# and that the data has been saved to ../data/deduped/test_progs/data.pkl

# import numpy as np
# from rasp_generator import sampling, utils


import pickle
from tqdm import tqdm
import numpy as np
import numpy as np
import random
import rasp_generator

# import os

# # Set JAX to use CPU
# os.environ["JAX_PLATFORM_NAME"] = "cpu"

__MAIN__ = "__main__"

# %%
from rasp_tokenizer import data_utils


def test_functionality_rasp_and_compiled(num_inputs=100, 
                                         data_path="../data/deduped/test_progs/data.pkl",
                                         data = None, 
                                         seed=None,
                                         atol = 0.1,
                                         rtol = 0.1):
    random.seed(seed)
    np.random.seed(seed)
        
    if data is None:
        with open(data_path, "rb") as file:
            data = pickle.load(file)
        
    for i, datapoint in tqdm(enumerate(data), total=len(data)):
        vocab_size = datapoint['model'].input_encoder.vocab_size
        
        for _ in range(num_inputs):
            
            model = datapoint['model']
            rasp = datapoint['rasp']
            
            size_input = model.input_encoder._max_seq_len - 1 #account for BOS token
            bound_input = model.input_encoder.vocab_size - 2 #account for compiler pad token and BOS token
            
            
            input = np.random.randint(0, bound_input, size_input).tolist()
            
            raw_output_model = model.apply(["compiler_bos"] + input).decoded[1:]
            output_model = np.array(raw_output_model)
            raw_output_rasp = rasp(input)
            output_rasp = np.array(raw_output_rasp)    
            
            error = False
      
            # check if any of the inputs are None
            if any([x is None for x in output_rasp]):
                raise ValueError(f"Output RASP {raw_output_rasp}\n",
                                 f"Output model {raw_output_model}\n",
                                 f"RASP contains None: for model '{i}' and input '{input}':\n")
            
            # if model is not floating, convert
            if not np.issubdtype(output_model.dtype, np.floating):
                output_model = output_model.astype(np.float32)
                
            if not np.issubdtype(output_rasp.dtype, np.floating):
                output_rasp = output_rasp.astype(np.float32)
    
            if not np.allclose(output_rasp, output_model, atol=atol, rtol=rtol):
                rasp_generator.utils.print_program(rasp)
                raise ValueError(f"Outputs are not close for model '{i}' and input '{input}':\n",
                                    f"Output RASP: {output_rasp}\n",
                                    f"Output Model: {output_model}\n")


if __name__ == __MAIN__:
    
    data = data_utils.load_batches(keep_aux=True)  # loads data generated by generate_data.py, including model & rasp
    deduped = data_utils.load_deduped(name = "pytest", flatten=False, keep_aux=True)  # loads data post-deduplication
    
    test_functionality_rasp_and_compiled(seed=42, data=deduped)

# %%
